function ptD = Assignment3_searchD(obstaclePos, obstacleRadius, searchDelta, considerArm)
%% set up variables
close all
% definition of the obstacle
circle_xy = obstaclePos;
r = obstacleRadius;

% initiate variables for the search counter
min_path_dist = inf;
min_d_xpos = inf;
min_d_ypos = inf;
discard = false;
startPt = [5,8];
endPt = [14,7];
%% perform a grid search around the area of interest
search_Delta = searchDelta;
min_improve = 0.05;
for dx = -1.5*r:search_Delta:1.5*r
    for dy = -1.5*r:search_Delta:1.5*r
        if nargin == 4
            DPt = [circle_xy(1) + dx, circle_xy(2) + dy];
        elseif nargin ==5
            DPt = [refinedCentre(1) + dx, refinedCentre(2) + dy];
        end

        %ignore the choice if the point is inside our obstacle
        if pdist([DPt;circle_xy],'Euclidean') < r
            continue;
        end
        path_dist = pdist([DPt;startPt],'Euclidean') + pdist([DPt;endPt],'Euclidean');
        %ignore this via point because it is longer than current best
        if path_dist + min_improve > min_path_dist
            continue;
        end
        
        % timing, position and velocity for pt B, pt C and pt D
        time = [3,5.5,8];
        ptA = [2,5;0,0];
        ptB = [5,8;0.25,0.25];
        ptC = [14,7;0,0];
        ptD = [DPt;0,0];
        %% calculate the segments coefficents for x and y
        x_coeff = TrajGen01([ptA(:,1),ptB(:,1),ptD(:,1)],[ptB(:,1),ptD(:,1),ptC(:,1)],time);
        y_coeff = TrajGen01([ptA(:,2),ptB(:,2),ptD(:,2)],[ptB(:,2),ptD(:,2),ptC(:,2)],time);
        
        %% get the displacement and velocity in both x and y
        x_displacement = plot_displacement(x_coeff,time,false);
        y_displacement = plot_displacement(y_coeff,time,false);
        
        %% check whether we collided with the obstacle
        closest_dist_to_obs = inf;
        
        for i = 1:length(x_displacement)
            dist = sqrt( (x_displacement(i) - circle_xy(1))^2 + (y_displacement(i) - circle_xy(2))^2);
            if dist < closest_dist_to_obs
                closest_dist_to_obs = dist;
            end
        end
        %discard this result if there is a collison
        if closest_dist_to_obs < r
            discard = true;
        end
        
        % consider the robotic arm
        if (considerArm)
            L1 = 9;
            L2 = 9;
            division = 5;
            Q1 = [];
            Q2 = [];
            for i = 1:floor(length(x_displacement)/10):length(x_displacement)
                [Q1,Q2] = two_arm_IK(x_displacement(i),y_displacement(i));
                mid_pt = [L1*cosd(Q1),L1*sind(Q1)];
                end_effector = mid_pt+[L2*cosd(Q1+Q2),L2*sind(Q1+Q2)];
                arm_pos = [linspace(0,mid_pt(1),division) linspace(mid_pt(1),end_effector(1),division);
                    linspace(0,mid_pt(2),division) linspace(mid_pt(2),end_effector(2),division)];
                for j = 1:length(arm_pos)
                    % if the robotic arm collides with the obstacle
                    if pdist([arm_pos(1,j),arm_pos(2,j);circle_xy(1),circle_xy(2)],'euclidean') < r
                        discard = true;
                        break;
                    end
                end
                if (discard)
                    break;
                end
            end
        end
        
        
        if discard == false
            min_path_dist = path_dist;
            min_d_xpos = DPt(1);
            min_d_ypos = DPt(2);
            fprintf('current best via point is (%4.2f , %4.2f) with BCD linaer distance %4.2f \n',min_d_xpos, min_d_ypos, min_path_dist)
        end
        % reset the discard
        discard =  false;
    end
end
ptD = [min_d_xpos min_d_ypos];